# -*- coding: utf-8 -*-
"""titanic_ann.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b38f4PxBSHcLo9JCZW5WTsKXE1EDSp7k
"""

import warnings
import numpy as np
import os
import falcon
import ujson
import csv
import pandas as pd
import tflite_runtime.interpreter as tflite
warnings.filterwarnings('ignore')

#'PassengerId','Pclass','Name','Sex','Age','SibSp','Parch','Ticket','Fare','Cabin','Embarked'
#dixie = [[900, 1, 'Kelley, Mrs. Dixie', 'female', 51, 1, 1, 'a5', 300.0,'732','S']]

#data = []
#survived = False

# Create a new column cabinbool indicating
""" def preprocess_person2(person):
  print('Preprocessing')
  print(person)
  train = pd.DataFrame(person, columns=['PassengerId','Pclass','Name','Sex','Age','SibSp','Parch','Ticket','Fare','Cabin','Embarked'])
  train["CabinBool"] = (train["Cabin"].notnull().astype('int'))
  train = train.drop(['Cabin'], axis=1)
  train = train.drop(['Ticket'], axis=1)
  train = train.fillna({"Embarked": "S"})
  train['Sex'] = train['Sex'].str.lower()
  train["Age"] = train["Age"].fillna(-0.5)
  bins = [-1, 0, 5, 12, 18, 24, 35, 60, np.inf]
  labels = ['Unknown', 'Baby', 'Child', 'Teenager','Student', 'Young Adult', 'Adult', 'Senior']
  train['AgeGroup'] = pd.cut(train["Age"], bins, labels=labels)
  train['Title'] = train.Name.str.extract(' ([A-Za-z]+)\.', expand=False)
  pd.crosstab(train['Title'], train['Sex'])
  train['Title'] = train['Title'].replace(['Lady', 'Capt', 'Col','Don', 'Dr', 'Major',
                          'Rev', 'Jonkheer', 'Dona'],'Rare')
  train['Title'] = train['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')
  train['Title'] = train['Title'].replace('Mlle', 'Miss')
  train['Title'] = train['Title'].replace('Ms', 'Miss')
  train['Title'] = train['Title'].replace('Mme', 'Mrs')
  #train[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()
  title_mapping = {"Mr": 1, "Miss": 2, "Mrs": 3, "Master": 4, "Royal": 5, "Rare": 6}
  train['Title'] = train['Title'].map(title_mapping)
  train['Title'] = train['Title'].fillna(0)
  mr_age = train[train["Title"] == 1]["AgeGroup"].mode() # Young Adult
  miss_age = train[train["Title"] == 2]["AgeGroup"].mode() # Student
  mrs_age = train[train["Title"] == 3]["AgeGroup"].mode() # Adult
  master_age = train[train["Title"] == 4]["AgeGroup"].mode() # Baby
  royal_age = train[train["Title"] == 5]["AgeGroup"].mode() # Adult
  rare_age = train[train["Title"] == 6]["AgeGroup"].mode() # Adult

  age_title_mapping = {1: "Young Adult", 2: "Student", 3: "Adult", 4: "Baby", 5: "Adult", 6: "Adult"}

  for x in range(len(train["AgeGroup"])):
    if train["AgeGroup"][x] == "Unknown":
      train["AgeGroup"][x] = age_title_mapping[train["Title"][x]]

  age_mapping = {'Baby': 1, 'Child': 2, 'Teenager': 3, 'Student': 4, 'Young Adult': 5, 'Adult': 6, 'Senior': 7}
  train['AgeGroup'] = train['AgeGroup'].map(age_mapping)

  train = train.drop(['Age'], axis=1)
  train = train.drop(['Name'], axis=1)
  sex_mapping = {"male": 0, "female": 1}
  train['Sex'] = train['Sex'].map(sex_mapping)
  embarked_mapping = {"S": 1, "C": 2, "Q": 3}
  train['Embarked'] = train['Embarked'].map(embarked_mapping)
  train['Fare'] = train['Fare']/100

  train = train.drop('PassengerId', axis=1)
  return train """

""" def preprocess_person(person):
  
  print(person)
  train = pd.DataFrame(person, columns=['PassengerId','Pclass','Name','Sex','Age','SibSp','Parch','Ticket','Fare','Cabin','Embarked'])
  train = train.drop(['Cabin'], axis=1)
  train = train.drop(['Ticket'], axis=1)
  train = train.drop(['Embarked'],axis=1)
  train = train.drop('PassengerId', axis=1)
  train['Age'].fillna(train['Age'].mean(), inplace=True)  
  train['Sex'] = train['Sex'].str.lower()
  train = train.drop('Name', axis=1)
  dictionary = {'female': 0, 'male' : 1}
  train['Sex'] = train['Sex'].apply(lambda x: dictionary[x])
  train['Age'] = train['Age']/100
  train['Fare'] = train['Fare']/100
    
  train["Sex"] = train["Sex"].astype("float")
  train["Pclass"] = train["Pclass"].astype("float")
  train["SibSp"] = train["SibSp"].astype("float")
  train["Parch"] = train["Parch"].astype("float")

  return train
 """
def predict(person):
    
    interpreter = tflite.Interpreter(model_path="./android_model.tflite")
    interpreter.allocate_tensors()

    # Get input and output tensors.
    input_details = interpreter.get_input_details()
    output_details = interpreter.get_output_details()

    person = list(map(float,person))  #convert string to float
    values = []
    for i in person:
        values.append(np.float32(i))

    finalValues = []
    finalValues.append(values)

    interpreter.set_tensor(input_details[0]['index'], finalValues)
    interpreter.invoke()

    pred = interpreter.get_tensor(output_details[0]['index'])
    return pred[0][0]


class Resource:
    

    def on_post(self, req, resp):
        survived = False
        ext = req.content_type[5:]
        #filename = "person" + '.' + ext
        filename = "person.csv"
        csv_path = os.path.join(".", filename)
        data = [0.1]*6    #used to hold final testing values

        with open(csv_path, 'wb') as csv_file:
            while True:
                chunk = req.stream.read(4096);#chunk is byte[]
                if not chunk:
                    break
                csv_file.write(chunk)

        with open(csv_path,newline = '') as csv_file:
            reader = csv.reader(csv_file)
            for row in reader:
                data = row
                
        result = predict(data)
        
        if result == 1.0:
            survived = True
            print(" you survived")
        else:
            survived = False
            print("You did not survive")
        print(survived)
 
        resp.status = falcon.HTTP_201
        resp.location = '/pred/' + filename
        resp.body = ujson.dumps(survived)


app = application = falcon.API()
app.add_route('/pred', Resource())

